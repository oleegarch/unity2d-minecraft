//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.2
//     from Assets/World/InputActions/World.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace World.InputActions
{
    /// <summary>
    /// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/World/InputActions/World.inputactions".
    /// </summary>
    /// <remarks>
    /// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
    /// </remarks>
    /// <example>
    /// <code>
    /// using namespace UnityEngine;
    /// using UnityEngine.InputSystem;
    ///
    /// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
    /// public class Example : MonoBehaviour, MyActions.IPlayerActions
    /// {
    ///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
    ///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
    ///
    ///     void Awake()
    ///     {
    ///         m_Actions = new MyActions_Actions();              // Create asset object.
    ///         m_Player = m_Actions.Player;                      // Extract action map object.
    ///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
    ///     }
    ///
    ///     void OnDestroy()
    ///     {
    ///         m_Actions.Dispose();                              // Destroy asset object.
    ///     }
    ///
    ///     void OnEnable()
    ///     {
    ///         m_Player.Enable();                                // Enable all actions within map.
    ///     }
    ///
    ///     void OnDisable()
    ///     {
    ///         m_Player.Disable();                               // Disable all actions within map.
    ///     }
    ///
    ///     #region Interface implementation of MyActions.IPlayerActions
    ///
    ///     // Invoked when "Move" action is either started, performed or canceled.
    ///     public void OnMove(InputAction.CallbackContext context)
    ///     {
    ///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
    ///     }
    ///
    ///     // Invoked when "Attack" action is either started, performed or canceled.
    ///     public void OnAttack(InputAction.CallbackContext context)
    ///     {
    ///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
    ///     }
    ///
    ///     #endregion
    /// }
    /// </code>
    /// </example>
    public partial class @WorldInputActions: IInputActionCollection2, IDisposable
    {
        /// <summary>
        /// Provides access to the underlying asset instance.
        /// </summary>
        public InputActionAsset asset { get; }

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public @WorldInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""version"": 1,
    ""name"": ""World"",
    ""maps"": [
        {
            ""name"": ""CameraSpectator"",
            ""id"": ""d9645100-4fed-44d7-85d6-47b1d9f657f0"",
            ""actions"": [
                {
                    ""name"": ""PointerStart"",
                    ""type"": ""Button"",
                    ""id"": ""91dc8d8a-f675-43ae-9cfb-9823d2a1f02c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PointerMove"",
                    ""type"": ""Value"",
                    ""id"": ""4d2dc76e-bf76-4604-bc8f-947c3a3bd284"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""KeyboardMove"",
                    ""type"": ""Value"",
                    ""id"": ""2dd1542d-923c-4bc1-b4d1-815f9a259b01"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""23c2f991-aae7-4414-86ca-481f4b89fd27"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5bbda22b-7805-4c34-8721-9b67259cee20"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e730a8db-527b-49b6-a673-801751bc0b1e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6fd65c3c-5a75-4f0c-bdc8-1ba4e0b414ac"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9846c1b8-a2b9-4613-8795-6e5c5b0cabfe"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""c4a409f2-f1b4-4a3a-9ef2-41f1a3333eda"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""fe97b253-913f-41df-b6aa-7e849ab4ade7"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a6c8fd61-3890-4645-8ef4-2fc7d8780aba"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8a14df27-0b02-4651-81c9-03d990906e7e"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""deba8455-4c3d-4593-b987-725e2659567d"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""54b32a13-c7c6-49b8-a26a-796fb7a32ef4"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2"",
                    ""groups"": """",
                    ""action"": ""PointerMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8bf05414-f3c8-4b47-81e4-4ad00b8b0729"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CameraZoom"",
            ""id"": ""80e9546f-5ac0-4223-83c0-13e45da9dc0a"",
            ""actions"": [
                {
                    ""name"": ""MouseZoom"",
                    ""type"": ""Value"",
                    ""id"": ""5a4e486c-12d3-4abf-a9d1-a426059d3351"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""84c308a7-1bd4-4516-9f6e-692d60e12152"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": ""RequireModifier"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseZoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BlockHovered"",
            ""id"": ""c9a935ca-16d7-482c-b1a1-182dd7a9e190"",
            ""actions"": [
                {
                    ""name"": ""PointerMove"",
                    ""type"": ""Value"",
                    ""id"": ""b796c25e-f94a-485d-aea6-ed21b0a4bacc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3f1a1b6f-8e81-4f74-ad62-466c06f917a8"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BlockBreaking"",
            ""id"": ""3d5fbec3-de19-4a3d-9e81-b817afb6472b"",
            ""actions"": [
                {
                    ""name"": ""PointerPress"",
                    ""type"": ""Button"",
                    ""id"": ""37e268c5-4e48-4efe-85d2-453af3e08405"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c0b30017-45a6-484a-a46d-3e6833fa11fc"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""HoveredBlockPlacer"",
            ""id"": ""77b51039-ba94-4576-b4fe-c659cd777e47"",
            ""actions"": [
                {
                    ""name"": ""MouseFastRightClick"",
                    ""type"": ""Button"",
                    ""id"": ""ab00be39-48dd-4566-afab-99a651ef8b5f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseSlowRightClick"",
                    ""type"": ""Button"",
                    ""id"": ""651085b4-9d5d-4dee-b517-7aaf808305bd"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9435f2ca-5ced-45e9-933e-ca2574401f0e"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Tap(duration=0.3)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseFastRightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84729a95-085b-47da-b2aa-9c73741cdb81"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Hold(duration=0.3)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseSlowRightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""HoveredBlockPicker"",
            ""id"": ""394ee511-d427-45f2-ba0d-15db1bad81bc"",
            ""actions"": [
                {
                    ""name"": ""MouseMiddleClick"",
                    ""type"": ""Button"",
                    ""id"": ""4175eeb0-f048-4646-9263-b9be6a6ba332"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2ab3c094-633f-471a-8d70-5034b62592a3"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseMiddleClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player"",
            ""id"": ""b575921d-9928-4311-b4e1-54065e32c53f"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""f77619cf-ccfc-49e5-a5e7-e43b851229a1"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""62d04f32-d4d8-48a4-9321-4d40d4be52f9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""db98f536-429b-4586-805b-51531f037a9f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48f56f3b-f620-495d-9db0-11ec63206efe"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0525afae-c481-4e18-91aa-bfdd62b32922"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""241908fd-6818-4c14-ab03-f7fba20f6790"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""47c7085b-6a82-4dc8-af74-c7f8fb4db3da"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8ae31f6e-5c0b-4844-ab10-c57e77f13c9a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""0f5e6752-e67a-4227-91d0-5c10976a77eb"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""0597b730-b664-4254-9ad1-a001c7cdcf68"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""247f8339-5cf9-49d4-9a16-a6ce6fa3cd42"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""InventoryPlayerHotbar"",
            ""id"": ""9ea46c91-2504-48f5-8868-280224b1a551"",
            ""actions"": [
                {
                    ""name"": ""MouseScroll"",
                    ""type"": ""Value"",
                    ""id"": ""800d0bc0-a2ac-46a0-b32c-12cbe04b8e0d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9e321a4d-79ab-492b-8830-bed8072441b1"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": ""RequireModifier(invert=true)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseScroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // CameraSpectator
            m_CameraSpectator = asset.FindActionMap("CameraSpectator", throwIfNotFound: true);
            m_CameraSpectator_PointerStart = m_CameraSpectator.FindAction("PointerStart", throwIfNotFound: true);
            m_CameraSpectator_PointerMove = m_CameraSpectator.FindAction("PointerMove", throwIfNotFound: true);
            m_CameraSpectator_KeyboardMove = m_CameraSpectator.FindAction("KeyboardMove", throwIfNotFound: true);
            // CameraZoom
            m_CameraZoom = asset.FindActionMap("CameraZoom", throwIfNotFound: true);
            m_CameraZoom_MouseZoom = m_CameraZoom.FindAction("MouseZoom", throwIfNotFound: true);
            // BlockHovered
            m_BlockHovered = asset.FindActionMap("BlockHovered", throwIfNotFound: true);
            m_BlockHovered_PointerMove = m_BlockHovered.FindAction("PointerMove", throwIfNotFound: true);
            // BlockBreaking
            m_BlockBreaking = asset.FindActionMap("BlockBreaking", throwIfNotFound: true);
            m_BlockBreaking_PointerPress = m_BlockBreaking.FindAction("PointerPress", throwIfNotFound: true);
            // HoveredBlockPlacer
            m_HoveredBlockPlacer = asset.FindActionMap("HoveredBlockPlacer", throwIfNotFound: true);
            m_HoveredBlockPlacer_MouseFastRightClick = m_HoveredBlockPlacer.FindAction("MouseFastRightClick", throwIfNotFound: true);
            m_HoveredBlockPlacer_MouseSlowRightClick = m_HoveredBlockPlacer.FindAction("MouseSlowRightClick", throwIfNotFound: true);
            // HoveredBlockPicker
            m_HoveredBlockPicker = asset.FindActionMap("HoveredBlockPicker", throwIfNotFound: true);
            m_HoveredBlockPicker_MouseMiddleClick = m_HoveredBlockPicker.FindAction("MouseMiddleClick", throwIfNotFound: true);
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
            m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
            // InventoryPlayerHotbar
            m_InventoryPlayerHotbar = asset.FindActionMap("InventoryPlayerHotbar", throwIfNotFound: true);
            m_InventoryPlayerHotbar_MouseScroll = m_InventoryPlayerHotbar.FindAction("MouseScroll", throwIfNotFound: true);
        }

        ~@WorldInputActions()
        {
            UnityEngine.Debug.Assert(!m_CameraSpectator.enabled, "This will cause a leak and performance issues, WorldInputActions.CameraSpectator.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_CameraZoom.enabled, "This will cause a leak and performance issues, WorldInputActions.CameraZoom.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_BlockHovered.enabled, "This will cause a leak and performance issues, WorldInputActions.BlockHovered.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_BlockBreaking.enabled, "This will cause a leak and performance issues, WorldInputActions.BlockBreaking.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_HoveredBlockPlacer.enabled, "This will cause a leak and performance issues, WorldInputActions.HoveredBlockPlacer.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_HoveredBlockPicker.enabled, "This will cause a leak and performance issues, WorldInputActions.HoveredBlockPicker.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, WorldInputActions.Player.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_InventoryPlayerHotbar.enabled, "This will cause a leak and performance issues, WorldInputActions.InventoryPlayerHotbar.Disable() has not been called.");
        }

        /// <summary>
        /// Destroys this asset and all associated <see cref="InputAction"/> instances.
        /// </summary>
        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
        public void Enable()
        {
            asset.Enable();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
        public void Disable()
        {
            asset.Disable();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
        public IEnumerable<InputBinding> bindings => asset.bindings;

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // CameraSpectator
        private readonly InputActionMap m_CameraSpectator;
        private List<ICameraSpectatorActions> m_CameraSpectatorActionsCallbackInterfaces = new List<ICameraSpectatorActions>();
        private readonly InputAction m_CameraSpectator_PointerStart;
        private readonly InputAction m_CameraSpectator_PointerMove;
        private readonly InputAction m_CameraSpectator_KeyboardMove;
        /// <summary>
        /// Provides access to input actions defined in input action map "CameraSpectator".
        /// </summary>
        public struct CameraSpectatorActions
        {
            private @WorldInputActions m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public CameraSpectatorActions(@WorldInputActions wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "CameraSpectator/PointerStart".
            /// </summary>
            public InputAction @PointerStart => m_Wrapper.m_CameraSpectator_PointerStart;
            /// <summary>
            /// Provides access to the underlying input action "CameraSpectator/PointerMove".
            /// </summary>
            public InputAction @PointerMove => m_Wrapper.m_CameraSpectator_PointerMove;
            /// <summary>
            /// Provides access to the underlying input action "CameraSpectator/KeyboardMove".
            /// </summary>
            public InputAction @KeyboardMove => m_Wrapper.m_CameraSpectator_KeyboardMove;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_CameraSpectator; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="CameraSpectatorActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(CameraSpectatorActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="CameraSpectatorActions" />
            public void AddCallbacks(ICameraSpectatorActions instance)
            {
                if (instance == null || m_Wrapper.m_CameraSpectatorActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CameraSpectatorActionsCallbackInterfaces.Add(instance);
                @PointerStart.started += instance.OnPointerStart;
                @PointerStart.performed += instance.OnPointerStart;
                @PointerStart.canceled += instance.OnPointerStart;
                @PointerMove.started += instance.OnPointerMove;
                @PointerMove.performed += instance.OnPointerMove;
                @PointerMove.canceled += instance.OnPointerMove;
                @KeyboardMove.started += instance.OnKeyboardMove;
                @KeyboardMove.performed += instance.OnKeyboardMove;
                @KeyboardMove.canceled += instance.OnKeyboardMove;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="CameraSpectatorActions" />
            private void UnregisterCallbacks(ICameraSpectatorActions instance)
            {
                @PointerStart.started -= instance.OnPointerStart;
                @PointerStart.performed -= instance.OnPointerStart;
                @PointerStart.canceled -= instance.OnPointerStart;
                @PointerMove.started -= instance.OnPointerMove;
                @PointerMove.performed -= instance.OnPointerMove;
                @PointerMove.canceled -= instance.OnPointerMove;
                @KeyboardMove.started -= instance.OnKeyboardMove;
                @KeyboardMove.performed -= instance.OnKeyboardMove;
                @KeyboardMove.canceled -= instance.OnKeyboardMove;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="CameraSpectatorActions.UnregisterCallbacks(ICameraSpectatorActions)" />.
            /// </summary>
            /// <seealso cref="CameraSpectatorActions.UnregisterCallbacks(ICameraSpectatorActions)" />
            public void RemoveCallbacks(ICameraSpectatorActions instance)
            {
                if (m_Wrapper.m_CameraSpectatorActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="CameraSpectatorActions.AddCallbacks(ICameraSpectatorActions)" />
            /// <seealso cref="CameraSpectatorActions.RemoveCallbacks(ICameraSpectatorActions)" />
            /// <seealso cref="CameraSpectatorActions.UnregisterCallbacks(ICameraSpectatorActions)" />
            public void SetCallbacks(ICameraSpectatorActions instance)
            {
                foreach (var item in m_Wrapper.m_CameraSpectatorActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CameraSpectatorActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="CameraSpectatorActions" /> instance referencing this action map.
        /// </summary>
        public CameraSpectatorActions @CameraSpectator => new CameraSpectatorActions(this);

        // CameraZoom
        private readonly InputActionMap m_CameraZoom;
        private List<ICameraZoomActions> m_CameraZoomActionsCallbackInterfaces = new List<ICameraZoomActions>();
        private readonly InputAction m_CameraZoom_MouseZoom;
        /// <summary>
        /// Provides access to input actions defined in input action map "CameraZoom".
        /// </summary>
        public struct CameraZoomActions
        {
            private @WorldInputActions m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public CameraZoomActions(@WorldInputActions wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "CameraZoom/MouseZoom".
            /// </summary>
            public InputAction @MouseZoom => m_Wrapper.m_CameraZoom_MouseZoom;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_CameraZoom; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="CameraZoomActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(CameraZoomActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="CameraZoomActions" />
            public void AddCallbacks(ICameraZoomActions instance)
            {
                if (instance == null || m_Wrapper.m_CameraZoomActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CameraZoomActionsCallbackInterfaces.Add(instance);
                @MouseZoom.started += instance.OnMouseZoom;
                @MouseZoom.performed += instance.OnMouseZoom;
                @MouseZoom.canceled += instance.OnMouseZoom;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="CameraZoomActions" />
            private void UnregisterCallbacks(ICameraZoomActions instance)
            {
                @MouseZoom.started -= instance.OnMouseZoom;
                @MouseZoom.performed -= instance.OnMouseZoom;
                @MouseZoom.canceled -= instance.OnMouseZoom;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="CameraZoomActions.UnregisterCallbacks(ICameraZoomActions)" />.
            /// </summary>
            /// <seealso cref="CameraZoomActions.UnregisterCallbacks(ICameraZoomActions)" />
            public void RemoveCallbacks(ICameraZoomActions instance)
            {
                if (m_Wrapper.m_CameraZoomActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="CameraZoomActions.AddCallbacks(ICameraZoomActions)" />
            /// <seealso cref="CameraZoomActions.RemoveCallbacks(ICameraZoomActions)" />
            /// <seealso cref="CameraZoomActions.UnregisterCallbacks(ICameraZoomActions)" />
            public void SetCallbacks(ICameraZoomActions instance)
            {
                foreach (var item in m_Wrapper.m_CameraZoomActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CameraZoomActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="CameraZoomActions" /> instance referencing this action map.
        /// </summary>
        public CameraZoomActions @CameraZoom => new CameraZoomActions(this);

        // BlockHovered
        private readonly InputActionMap m_BlockHovered;
        private List<IBlockHoveredActions> m_BlockHoveredActionsCallbackInterfaces = new List<IBlockHoveredActions>();
        private readonly InputAction m_BlockHovered_PointerMove;
        /// <summary>
        /// Provides access to input actions defined in input action map "BlockHovered".
        /// </summary>
        public struct BlockHoveredActions
        {
            private @WorldInputActions m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public BlockHoveredActions(@WorldInputActions wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "BlockHovered/PointerMove".
            /// </summary>
            public InputAction @PointerMove => m_Wrapper.m_BlockHovered_PointerMove;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_BlockHovered; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="BlockHoveredActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(BlockHoveredActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="BlockHoveredActions" />
            public void AddCallbacks(IBlockHoveredActions instance)
            {
                if (instance == null || m_Wrapper.m_BlockHoveredActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_BlockHoveredActionsCallbackInterfaces.Add(instance);
                @PointerMove.started += instance.OnPointerMove;
                @PointerMove.performed += instance.OnPointerMove;
                @PointerMove.canceled += instance.OnPointerMove;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="BlockHoveredActions" />
            private void UnregisterCallbacks(IBlockHoveredActions instance)
            {
                @PointerMove.started -= instance.OnPointerMove;
                @PointerMove.performed -= instance.OnPointerMove;
                @PointerMove.canceled -= instance.OnPointerMove;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="BlockHoveredActions.UnregisterCallbacks(IBlockHoveredActions)" />.
            /// </summary>
            /// <seealso cref="BlockHoveredActions.UnregisterCallbacks(IBlockHoveredActions)" />
            public void RemoveCallbacks(IBlockHoveredActions instance)
            {
                if (m_Wrapper.m_BlockHoveredActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="BlockHoveredActions.AddCallbacks(IBlockHoveredActions)" />
            /// <seealso cref="BlockHoveredActions.RemoveCallbacks(IBlockHoveredActions)" />
            /// <seealso cref="BlockHoveredActions.UnregisterCallbacks(IBlockHoveredActions)" />
            public void SetCallbacks(IBlockHoveredActions instance)
            {
                foreach (var item in m_Wrapper.m_BlockHoveredActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_BlockHoveredActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="BlockHoveredActions" /> instance referencing this action map.
        /// </summary>
        public BlockHoveredActions @BlockHovered => new BlockHoveredActions(this);

        // BlockBreaking
        private readonly InputActionMap m_BlockBreaking;
        private List<IBlockBreakingActions> m_BlockBreakingActionsCallbackInterfaces = new List<IBlockBreakingActions>();
        private readonly InputAction m_BlockBreaking_PointerPress;
        /// <summary>
        /// Provides access to input actions defined in input action map "BlockBreaking".
        /// </summary>
        public struct BlockBreakingActions
        {
            private @WorldInputActions m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public BlockBreakingActions(@WorldInputActions wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "BlockBreaking/PointerPress".
            /// </summary>
            public InputAction @PointerPress => m_Wrapper.m_BlockBreaking_PointerPress;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_BlockBreaking; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="BlockBreakingActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(BlockBreakingActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="BlockBreakingActions" />
            public void AddCallbacks(IBlockBreakingActions instance)
            {
                if (instance == null || m_Wrapper.m_BlockBreakingActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_BlockBreakingActionsCallbackInterfaces.Add(instance);
                @PointerPress.started += instance.OnPointerPress;
                @PointerPress.performed += instance.OnPointerPress;
                @PointerPress.canceled += instance.OnPointerPress;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="BlockBreakingActions" />
            private void UnregisterCallbacks(IBlockBreakingActions instance)
            {
                @PointerPress.started -= instance.OnPointerPress;
                @PointerPress.performed -= instance.OnPointerPress;
                @PointerPress.canceled -= instance.OnPointerPress;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="BlockBreakingActions.UnregisterCallbacks(IBlockBreakingActions)" />.
            /// </summary>
            /// <seealso cref="BlockBreakingActions.UnregisterCallbacks(IBlockBreakingActions)" />
            public void RemoveCallbacks(IBlockBreakingActions instance)
            {
                if (m_Wrapper.m_BlockBreakingActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="BlockBreakingActions.AddCallbacks(IBlockBreakingActions)" />
            /// <seealso cref="BlockBreakingActions.RemoveCallbacks(IBlockBreakingActions)" />
            /// <seealso cref="BlockBreakingActions.UnregisterCallbacks(IBlockBreakingActions)" />
            public void SetCallbacks(IBlockBreakingActions instance)
            {
                foreach (var item in m_Wrapper.m_BlockBreakingActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_BlockBreakingActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="BlockBreakingActions" /> instance referencing this action map.
        /// </summary>
        public BlockBreakingActions @BlockBreaking => new BlockBreakingActions(this);

        // HoveredBlockPlacer
        private readonly InputActionMap m_HoveredBlockPlacer;
        private List<IHoveredBlockPlacerActions> m_HoveredBlockPlacerActionsCallbackInterfaces = new List<IHoveredBlockPlacerActions>();
        private readonly InputAction m_HoveredBlockPlacer_MouseFastRightClick;
        private readonly InputAction m_HoveredBlockPlacer_MouseSlowRightClick;
        /// <summary>
        /// Provides access to input actions defined in input action map "HoveredBlockPlacer".
        /// </summary>
        public struct HoveredBlockPlacerActions
        {
            private @WorldInputActions m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public HoveredBlockPlacerActions(@WorldInputActions wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "HoveredBlockPlacer/MouseFastRightClick".
            /// </summary>
            public InputAction @MouseFastRightClick => m_Wrapper.m_HoveredBlockPlacer_MouseFastRightClick;
            /// <summary>
            /// Provides access to the underlying input action "HoveredBlockPlacer/MouseSlowRightClick".
            /// </summary>
            public InputAction @MouseSlowRightClick => m_Wrapper.m_HoveredBlockPlacer_MouseSlowRightClick;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_HoveredBlockPlacer; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="HoveredBlockPlacerActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(HoveredBlockPlacerActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="HoveredBlockPlacerActions" />
            public void AddCallbacks(IHoveredBlockPlacerActions instance)
            {
                if (instance == null || m_Wrapper.m_HoveredBlockPlacerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_HoveredBlockPlacerActionsCallbackInterfaces.Add(instance);
                @MouseFastRightClick.started += instance.OnMouseFastRightClick;
                @MouseFastRightClick.performed += instance.OnMouseFastRightClick;
                @MouseFastRightClick.canceled += instance.OnMouseFastRightClick;
                @MouseSlowRightClick.started += instance.OnMouseSlowRightClick;
                @MouseSlowRightClick.performed += instance.OnMouseSlowRightClick;
                @MouseSlowRightClick.canceled += instance.OnMouseSlowRightClick;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="HoveredBlockPlacerActions" />
            private void UnregisterCallbacks(IHoveredBlockPlacerActions instance)
            {
                @MouseFastRightClick.started -= instance.OnMouseFastRightClick;
                @MouseFastRightClick.performed -= instance.OnMouseFastRightClick;
                @MouseFastRightClick.canceled -= instance.OnMouseFastRightClick;
                @MouseSlowRightClick.started -= instance.OnMouseSlowRightClick;
                @MouseSlowRightClick.performed -= instance.OnMouseSlowRightClick;
                @MouseSlowRightClick.canceled -= instance.OnMouseSlowRightClick;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="HoveredBlockPlacerActions.UnregisterCallbacks(IHoveredBlockPlacerActions)" />.
            /// </summary>
            /// <seealso cref="HoveredBlockPlacerActions.UnregisterCallbacks(IHoveredBlockPlacerActions)" />
            public void RemoveCallbacks(IHoveredBlockPlacerActions instance)
            {
                if (m_Wrapper.m_HoveredBlockPlacerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="HoveredBlockPlacerActions.AddCallbacks(IHoveredBlockPlacerActions)" />
            /// <seealso cref="HoveredBlockPlacerActions.RemoveCallbacks(IHoveredBlockPlacerActions)" />
            /// <seealso cref="HoveredBlockPlacerActions.UnregisterCallbacks(IHoveredBlockPlacerActions)" />
            public void SetCallbacks(IHoveredBlockPlacerActions instance)
            {
                foreach (var item in m_Wrapper.m_HoveredBlockPlacerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_HoveredBlockPlacerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="HoveredBlockPlacerActions" /> instance referencing this action map.
        /// </summary>
        public HoveredBlockPlacerActions @HoveredBlockPlacer => new HoveredBlockPlacerActions(this);

        // HoveredBlockPicker
        private readonly InputActionMap m_HoveredBlockPicker;
        private List<IHoveredBlockPickerActions> m_HoveredBlockPickerActionsCallbackInterfaces = new List<IHoveredBlockPickerActions>();
        private readonly InputAction m_HoveredBlockPicker_MouseMiddleClick;
        /// <summary>
        /// Provides access to input actions defined in input action map "HoveredBlockPicker".
        /// </summary>
        public struct HoveredBlockPickerActions
        {
            private @WorldInputActions m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public HoveredBlockPickerActions(@WorldInputActions wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "HoveredBlockPicker/MouseMiddleClick".
            /// </summary>
            public InputAction @MouseMiddleClick => m_Wrapper.m_HoveredBlockPicker_MouseMiddleClick;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_HoveredBlockPicker; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="HoveredBlockPickerActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(HoveredBlockPickerActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="HoveredBlockPickerActions" />
            public void AddCallbacks(IHoveredBlockPickerActions instance)
            {
                if (instance == null || m_Wrapper.m_HoveredBlockPickerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_HoveredBlockPickerActionsCallbackInterfaces.Add(instance);
                @MouseMiddleClick.started += instance.OnMouseMiddleClick;
                @MouseMiddleClick.performed += instance.OnMouseMiddleClick;
                @MouseMiddleClick.canceled += instance.OnMouseMiddleClick;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="HoveredBlockPickerActions" />
            private void UnregisterCallbacks(IHoveredBlockPickerActions instance)
            {
                @MouseMiddleClick.started -= instance.OnMouseMiddleClick;
                @MouseMiddleClick.performed -= instance.OnMouseMiddleClick;
                @MouseMiddleClick.canceled -= instance.OnMouseMiddleClick;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="HoveredBlockPickerActions.UnregisterCallbacks(IHoveredBlockPickerActions)" />.
            /// </summary>
            /// <seealso cref="HoveredBlockPickerActions.UnregisterCallbacks(IHoveredBlockPickerActions)" />
            public void RemoveCallbacks(IHoveredBlockPickerActions instance)
            {
                if (m_Wrapper.m_HoveredBlockPickerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="HoveredBlockPickerActions.AddCallbacks(IHoveredBlockPickerActions)" />
            /// <seealso cref="HoveredBlockPickerActions.RemoveCallbacks(IHoveredBlockPickerActions)" />
            /// <seealso cref="HoveredBlockPickerActions.UnregisterCallbacks(IHoveredBlockPickerActions)" />
            public void SetCallbacks(IHoveredBlockPickerActions instance)
            {
                foreach (var item in m_Wrapper.m_HoveredBlockPickerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_HoveredBlockPickerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="HoveredBlockPickerActions" /> instance referencing this action map.
        /// </summary>
        public HoveredBlockPickerActions @HoveredBlockPicker => new HoveredBlockPickerActions(this);

        // Player
        private readonly InputActionMap m_Player;
        private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
        private readonly InputAction m_Player_Move;
        private readonly InputAction m_Player_Jump;
        /// <summary>
        /// Provides access to input actions defined in input action map "Player".
        /// </summary>
        public struct PlayerActions
        {
            private @WorldInputActions m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public PlayerActions(@WorldInputActions wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "Player/Move".
            /// </summary>
            public InputAction @Move => m_Wrapper.m_Player_Move;
            /// <summary>
            /// Provides access to the underlying input action "Player/Jump".
            /// </summary>
            public InputAction @Jump => m_Wrapper.m_Player_Jump;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="PlayerActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="PlayerActions" />
            public void AddCallbacks(IPlayerActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="PlayerActions" />
            private void UnregisterCallbacks(IPlayerActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="PlayerActions.UnregisterCallbacks(IPlayerActions)" />.
            /// </summary>
            /// <seealso cref="PlayerActions.UnregisterCallbacks(IPlayerActions)" />
            public void RemoveCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="PlayerActions.AddCallbacks(IPlayerActions)" />
            /// <seealso cref="PlayerActions.RemoveCallbacks(IPlayerActions)" />
            /// <seealso cref="PlayerActions.UnregisterCallbacks(IPlayerActions)" />
            public void SetCallbacks(IPlayerActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="PlayerActions" /> instance referencing this action map.
        /// </summary>
        public PlayerActions @Player => new PlayerActions(this);

        // InventoryPlayerHotbar
        private readonly InputActionMap m_InventoryPlayerHotbar;
        private List<IInventoryPlayerHotbarActions> m_InventoryPlayerHotbarActionsCallbackInterfaces = new List<IInventoryPlayerHotbarActions>();
        private readonly InputAction m_InventoryPlayerHotbar_MouseScroll;
        /// <summary>
        /// Provides access to input actions defined in input action map "InventoryPlayerHotbar".
        /// </summary>
        public struct InventoryPlayerHotbarActions
        {
            private @WorldInputActions m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public InventoryPlayerHotbarActions(@WorldInputActions wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "InventoryPlayerHotbar/MouseScroll".
            /// </summary>
            public InputAction @MouseScroll => m_Wrapper.m_InventoryPlayerHotbar_MouseScroll;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_InventoryPlayerHotbar; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="InventoryPlayerHotbarActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(InventoryPlayerHotbarActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="InventoryPlayerHotbarActions" />
            public void AddCallbacks(IInventoryPlayerHotbarActions instance)
            {
                if (instance == null || m_Wrapper.m_InventoryPlayerHotbarActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_InventoryPlayerHotbarActionsCallbackInterfaces.Add(instance);
                @MouseScroll.started += instance.OnMouseScroll;
                @MouseScroll.performed += instance.OnMouseScroll;
                @MouseScroll.canceled += instance.OnMouseScroll;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="InventoryPlayerHotbarActions" />
            private void UnregisterCallbacks(IInventoryPlayerHotbarActions instance)
            {
                @MouseScroll.started -= instance.OnMouseScroll;
                @MouseScroll.performed -= instance.OnMouseScroll;
                @MouseScroll.canceled -= instance.OnMouseScroll;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="InventoryPlayerHotbarActions.UnregisterCallbacks(IInventoryPlayerHotbarActions)" />.
            /// </summary>
            /// <seealso cref="InventoryPlayerHotbarActions.UnregisterCallbacks(IInventoryPlayerHotbarActions)" />
            public void RemoveCallbacks(IInventoryPlayerHotbarActions instance)
            {
                if (m_Wrapper.m_InventoryPlayerHotbarActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="InventoryPlayerHotbarActions.AddCallbacks(IInventoryPlayerHotbarActions)" />
            /// <seealso cref="InventoryPlayerHotbarActions.RemoveCallbacks(IInventoryPlayerHotbarActions)" />
            /// <seealso cref="InventoryPlayerHotbarActions.UnregisterCallbacks(IInventoryPlayerHotbarActions)" />
            public void SetCallbacks(IInventoryPlayerHotbarActions instance)
            {
                foreach (var item in m_Wrapper.m_InventoryPlayerHotbarActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_InventoryPlayerHotbarActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="InventoryPlayerHotbarActions" /> instance referencing this action map.
        /// </summary>
        public InventoryPlayerHotbarActions @InventoryPlayerHotbar => new InventoryPlayerHotbarActions(this);
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "CameraSpectator" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="CameraSpectatorActions.AddCallbacks(ICameraSpectatorActions)" />
        /// <seealso cref="CameraSpectatorActions.RemoveCallbacks(ICameraSpectatorActions)" />
        public interface ICameraSpectatorActions
        {
            /// <summary>
            /// Method invoked when associated input action "PointerStart" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnPointerStart(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "PointerMove" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnPointerMove(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "KeyboardMove" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnKeyboardMove(InputAction.CallbackContext context);
        }
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "CameraZoom" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="CameraZoomActions.AddCallbacks(ICameraZoomActions)" />
        /// <seealso cref="CameraZoomActions.RemoveCallbacks(ICameraZoomActions)" />
        public interface ICameraZoomActions
        {
            /// <summary>
            /// Method invoked when associated input action "MouseZoom" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnMouseZoom(InputAction.CallbackContext context);
        }
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "BlockHovered" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="BlockHoveredActions.AddCallbacks(IBlockHoveredActions)" />
        /// <seealso cref="BlockHoveredActions.RemoveCallbacks(IBlockHoveredActions)" />
        public interface IBlockHoveredActions
        {
            /// <summary>
            /// Method invoked when associated input action "PointerMove" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnPointerMove(InputAction.CallbackContext context);
        }
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "BlockBreaking" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="BlockBreakingActions.AddCallbacks(IBlockBreakingActions)" />
        /// <seealso cref="BlockBreakingActions.RemoveCallbacks(IBlockBreakingActions)" />
        public interface IBlockBreakingActions
        {
            /// <summary>
            /// Method invoked when associated input action "PointerPress" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnPointerPress(InputAction.CallbackContext context);
        }
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "HoveredBlockPlacer" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="HoveredBlockPlacerActions.AddCallbacks(IHoveredBlockPlacerActions)" />
        /// <seealso cref="HoveredBlockPlacerActions.RemoveCallbacks(IHoveredBlockPlacerActions)" />
        public interface IHoveredBlockPlacerActions
        {
            /// <summary>
            /// Method invoked when associated input action "MouseFastRightClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnMouseFastRightClick(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "MouseSlowRightClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnMouseSlowRightClick(InputAction.CallbackContext context);
        }
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "HoveredBlockPicker" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="HoveredBlockPickerActions.AddCallbacks(IHoveredBlockPickerActions)" />
        /// <seealso cref="HoveredBlockPickerActions.RemoveCallbacks(IHoveredBlockPickerActions)" />
        public interface IHoveredBlockPickerActions
        {
            /// <summary>
            /// Method invoked when associated input action "MouseMiddleClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnMouseMiddleClick(InputAction.CallbackContext context);
        }
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Player" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="PlayerActions.AddCallbacks(IPlayerActions)" />
        /// <seealso cref="PlayerActions.RemoveCallbacks(IPlayerActions)" />
        public interface IPlayerActions
        {
            /// <summary>
            /// Method invoked when associated input action "Move" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnMove(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Jump" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnJump(InputAction.CallbackContext context);
        }
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "InventoryPlayerHotbar" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="InventoryPlayerHotbarActions.AddCallbacks(IInventoryPlayerHotbarActions)" />
        /// <seealso cref="InventoryPlayerHotbarActions.RemoveCallbacks(IInventoryPlayerHotbarActions)" />
        public interface IInventoryPlayerHotbarActions
        {
            /// <summary>
            /// Method invoked when associated input action "MouseScroll" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnMouseScroll(InputAction.CallbackContext context);
        }
    }
}
